/* Clear will append a pseudo element after the elements to clear the floats */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* This part resets the whole styling */
*,
*::after,
*::before {
  /* Declares each and every element */
  margin: 0;
  /* By default, browsers apply a margin & padding already */
  padding: 0;
  box-sizing: inherit; }

html {
  /* This describes what 1 rem will be */
  font-size: 62.5%;
  /* Set it to 62.5% (100% divide by default browser's 16px) so that it'll be easier to use rem due to inheritance values */
  /* It'll also be easier to use media queries */ }

body {
  box-sizing: border-box;
  /* Changes model so margin & padding isn't added to total width or height. Instead, they are separate */ }

body {
  /* Put font here because font is usually inherited */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  /* 1.7x bigger than default */
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: white;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.74rem;
    animation-name: moveInRight;
    animation-duration: 1s; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  /* Inline block so the background doesn't take 100% of width. Only until h2 ends */
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  /* Makes the background clip to exactly where the text is */
  color: transparent;
  /* Color transparent so the gradient background shows from behind the text */
  transition: all .2s;
  letter-spacing: 2px; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

/* Text-align works on inline blocks only */
.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh;
  /* -20vh obtained from taking height 95vh and subtracting 75vh from polygon in header.scss */ }

.btn {
  /* This is the start of the hover fade out effect */ }
  .btn:link, .btn:visited {
    /* Applies to links that haven't been visited yet */
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* x, y, blur amount */
    /* This will give the button hover the fade out effect */ }
    .btn:hover::after {
      /* When we hover, we want some after elements */
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
      /* Sets it to 0 */ }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: white;
    color: #777; }
    .btn--white::after {
      background-color: white; }
  .btn::after {
    /* This will be below the element. Child of element */
    content: "";
    /* ALWAYS required */
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    /* Needs a reference which is the first element with a relative position it can find. Will make this go underneath element */
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    animation-fill-mode: backwards; }

/* Learn more button */
.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: white;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
  /* Move the box UP */ }

.btn-text:active {
  box-shadow: 0 1rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative;
  /* Not the photo that's hovered on */ }
  .composition__photo {
    width: 55%;
    /* Define images in % because it'll be more responsive for diff viewports */
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    /* Take the pictures out of flow */
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem;
    /* Give space between content and bordder */ }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      /* Once hovered, shadow increases and is darker */
      z-index: 20;
      /* So the one image goes on top */ }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.header {
  height: 95vh;
  /* 95% of viewport height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* Gradient is always back-ground image. From light green to dark green*/
  background-size: cover;
  /* Will always try to fit element into width of box */
  background-position: top;
  /* When adjusting viewport size, top of image will remain the same */
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* Centers the header */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    /* This shifts due to the position of the parent element-- header */
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    /* This moves the element in relation to parent element */
    left: 50%;
    transform: translate(-50%, -50%);
    /* The transform is in no relation to the parent element, but of the element itself */
    text-align: center; }

.row {
  max-width: 114rem;
  /* Max width means if there's not enough space in viewport then it will fill whatever it can */
  margin: 0 auto;
  /* Used to center a block element inside of another block element */
  /* Not selects everything EXCEPT the last-child */
  /* The ^ symbol will select all elements that STARTS with "...." */
  /* THe * symbol will select all elements that CONTAIN with "...." */
  /* THe $ symbol will select all elements that ENDS with "...." */
  /* Gutter width added back in otherwise there will be a margin right or gutter right of last child */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left;
    /* We want the margin on the right of all elements except the last element */ }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    /* In the calc function of CSS, if we want to use VARIABLES then we have to wrap it in # {} */
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }
