/* Clear will append a pseudo element after the elements to clear the floats */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* This part resets the whole styling */
*,
*::after,
*::before {
  /* Declares each and every element */
  margin: 0;
  /* By default, browsers apply a margin & padding already */
  padding: 0;
  box-sizing: inherit; }

html {
  /* This describes what 1 rem will be */
  font-size: 62.5%;
  /* Set it to 62.5% (100% divide by default browser's 16px) so that it'll be easier to use rem due to inheritance values */
  /* It'll also be easier to use media queries */ }

body {
  box-sizing: border-box;
  /* Changes model so margin & padding isn't added to total width or height. Instead, they are separate */ }

body {
  /* Put font here because font is usually inherited */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  /* 1.7x bigger than default */
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: white;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.74rem;
    animation-name: moveInRight;
    animation-duration: 1s; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  /* Inline block so the background doesn't take 100% of width. Only until h2 ends */
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  /* Makes the background clip to exactly where the text is */
  color: transparent;
  /* Color transparent so the gradient background shows from behind the text */
  transition: all .2s;
  letter-spacing: 2px; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center !important; }

/* Text-align works on inline blocks only */
.u-margin-bottom-small {
  margin-bottom: 1.5rem !important; }

.u-margin-bottom-medium {
  margin-bottom: 4rem !important; }

.u-margin-bottom-big {
  margin-bottom: 8rem !important; }

.u-margin-top-big {
  margin-top: 8rem !important; }

.u-margin-top-huge {
  margin-top: 10rem !important; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh;
  /* -20vh obtained from taking height 95vh and subtracting 75vh from polygon in header.scss */ }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  /* Gradient is always back-ground image. From light green to dark green*/
  background-size: cover;
  transform: skewY(-7deg);
  margin-top: -12rem; }
  .section-features > * {
    /* Child selector. But only everything that's direct of section-features */
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  margin-top: -12rem; }

.section-stories {
  padding: 15rem 0;
  position: relative; }

.section-book {
  padding: 15rem 0;
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }

.book {
  background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 50%, transparent 50%), url(../img/nat-10.jpg);
  /* The 105 deg will make the slant in the div */
  background-size: 100%;
  /* 100% in background-size is the same as cover */
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.2);
  height: 50rem; }
  .book__form {
    width: 50%;
    padding: 6rem; }

.btn {
  /* This is the start of the hover fade out effect */ }
  .btn, .btn:link, .btn:visited {
    /* Applies to links that haven't been visited yet */
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem;
    border: none;
    cursor: pointer; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* x, y, blur amount */
    /* This will give the button hover the fade out effect */ }
    .btn:hover::after {
      /* When we hover, we want some after elements */
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
      /* Sets it to 0 */ }
  .btn:active, .btn:focus {
    outline: none;
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: white;
    color: #777; }
    .btn--white::after {
      background-color: white; }
  .btn--green {
    background-color: #55c57a;
    color: white; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn::after {
    /* This will be below the element. Child of element */
    content: "";
    /* ALWAYS required */
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    /* Needs a reference which is the first element with a relative position it can find. Will make this go underneath element */
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    animation-fill-mode: backwards; }

/* Learn more button */
.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: white;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
  /* Move the box UP */ }

.btn-text:active {
  box-shadow: 0 1rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative;
  /* .composition:hover .composition__photo:not(:hover) */
  /* Not the photo that's hovered on */ }
  .composition__photo {
    width: 55%;
    /* Define images in % because it'll be more responsive for diff viewports */
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    /* Take the pictures out of flow */
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem;
    /* Give space between content and bordder */ }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      /* Once hovered, shadow increases and is darker */
      z-index: 20;
      /* So the one image goes on top */ }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: all .3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: .4rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03);
    /* Gives the box the zoom in hover effect */ }

.card {
  /* Functionality */
  perspective: 150rem;
  -moz-perspective: 150rem;
  /* Perspective gives it the flipping effect */
  /* Although the hover is what changes perspective, the perspective has to be in parent element */
  position: relative;
  height: 52rem;
  /* Front side styling */
  /* Back side styling */ }
  .card__side {
    height: 52rem;
    transition: all .8s ease;
    position: absolute;
    /* Absolute will collapse the height. Can't clear sides so give height in parent element */
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: 3px;
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      background-color: white; }
    .card__side--back {
      transform: rotateY(-180deg);
      /* Backside is already at 180 degrees */ }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
  .card:hover .card__side--front {
    transform: rotateY(180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen;
    /* Without blend mode, you'd have to photoshop photo then import
        This will do it right in the css file for you already */
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    border-top-left-radius: 3px;
    border-top-right-radius: 3px; }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: url(../img/nat-5.jpg); }
    .card__picture--3 {
      background-image: url(../img/nat-5.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: white;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
    /* Because "The Sea Explorer" is broken up, using clone will get each box the same padding */ }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto;
      /* Centers if not using absolute */ }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    text-align: center;
    color: white;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }

.story {
  width: 75%;
  margin: 0 auto;
  /* Centered like this because it's a block element inside a block element */
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  transform: skewX(-12deg); }
  .story__shape {
    height: 15rem;
    width: 15rem;
    float: left;
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    /* This will have text flow around circle.
        50% of height and width. 
        Only works if floated and has defined dimensions (height/ width) */
    clip-path: circle(50% at 50% 50%);
    transform: translate(-3rem, -2rem) skewX(12deg);
    position: relative; }
  .story__img {
    height: 100%;
    /* Image is inside a shape that has a defined width.
        But because image width bigger than set width, we set height to 100% */
    transform: translateX(-4rem) scale(1.4);
    transition: all .5s; }
  .story__text {
    transform: translateY(-2rem) skewX(12deg); }
  .story__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    text-transform: uppercase;
    font-size: 1.7rem;
    text-align: center;
    opacity: 0;
    transition: all .5s;
    backface-visibility: hidden;
    /* When something happens in translate or animation, use this to fix it */ }
  .story:hover .story__caption {
    /* .story:hover .story__caption if hover over story then the caption will appear */
    opacity: 1;
    transform: translate(-50%, -50%); }
  .story:hover .story__img {
    transform: translateX(-4rem) scale(1);
    filter: blur(3px) brightness(80%); }

.bg-video {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
  opacity: .15;
  overflow: hidden;
  /* Completely fixes the overflow problem */ }
  .bg-video__content {
    height: 100%;
    width: 100%;
    object-fit: cover;
    /* Maintains aspect ratio. 
        Element (video) will fill entire parent while still maintaining aspect ratio */ }

.form__group:not(:last-child) {
  margin-bottom: 2rem; }

.form__input {
  font-size: 1.5rem;
  font-family: inherit;
  color: inherit;
  padding: 1.5rem 2rem;
  border-radius: 2px;
  background-color: rgba(255, 255, 255, 0.5);
  border: none;
  border-bottom: 3px solid transparent;
  /* Border bottom here because without it, you'll get the push down animation.
        With this already here, there is no 'pushing down' */
  width: 90%;
  display: block;
  transition: all .3s; }
  .form__input:focus {
    outline: none;
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.1);
    border-bottom: 3px solid #55c57a; }
  .form__input:focus:invalid {
    border-bottom: 3px solid #ff7730; }
  .form__input::-webkit-input-placeholder {
    color: #999; }

.form__label {
  font-size: 1.2rem;
  font-weight: 700;
  margin-left: 2rem;
  margin-top: .7rem;
  display: block;
  /* Without block, margins won't work */
  transition: all .3s; }

.form__input:placeholder-shown + .form__label {
  /* The input pseudo class works on inputs, but the label is what we want to style */
  /* + sign is the adjacent sibling selector. ~ is the general sibling selector */
  opacity: 0;
  visibility: hidden;
  /* Why not just visibility hidden? We can't animate that, only opacity */
  transform: translateY(-4rem); }

.form__radio-group {
  width: 49%;
  display: inline-block; }

.form__radio-label {
  font-size: 1.6rem;
  cursor: pointer;
  position: relative;
  padding-left: 4rem; }

.form__radio-input {
  display: none; }

.form__radio-button {
  height: 3rem;
  width: 3rem;
  border: 5px solid #55c57a;
  border-radius: 50%;
  display: inline-block;
  position: absolute;
  left: 0;
  top: -.4rem; }
  .form__radio-button::after {
    /* Little green circle inside the green ring */
    content: "";
    display: block;
    height: 1.3rem;
    width: 1.3rem;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #55c57a;
    opacity: 0;
    transition: opacity .2s; }

.form__radio-input:checked ~ .form__radio-label .form__radio-button::after {
  /* When we hit the label element, it becomes checked hence pseudo checked. 
        And then we change the label along with its child because that's the one we want to select*/
  opacity: 1; }

.header {
  height: 95vh;
  /* 95% of viewport height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* Gradient is always back-ground image. From light green to dark green*/
  background-size: cover;
  /* Will always try to fit element into width of box */
  background-position: top;
  /* When adjusting viewport size, top of image will remain the same */
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* Centers the header */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    /* This shifts due to the position of the parent element-- header */
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    /* This moves the element in relation to parent element */
    left: 50%;
    transform: translate(-50%, -50%);
    /* The transform is in no relation to the parent element, but of the element itself */
    text-align: center; }

.row {
  max-width: 114rem;
  /* Max width means if there's not enough space in viewport then it will fill whatever it can */
  margin: 0 auto;
  /* Used to center a block element inside of another block element */
  /* Not selects everything EXCEPT the last-child */
  /* The ^ symbol will select all elements that STARTS with "...." */
  /* THe * symbol will select all elements that CONTAIN with "...." */
  /* THe $ symbol will select all elements that ENDS with "...." */
  /* Gutter width added back in otherwise there will be a margin right or gutter right of last child */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left;
    /* We want the margin on the right of all elements except the last element */ }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    /* In the calc function of CSS, if we want to use VARIABLES then we have to wrap it in # {} */
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }
